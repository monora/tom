
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_test_otr.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_test_otr.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_test_otr.py:


Example showing OTR anomalie
============================

Here we investigate the routing specification for a train
with interesting OTRs.

.. GENERATED FROM PYTHON SOURCE LINES 8-12

.. code-block:: default

    from tom.plot import plot_train, plot_graph
    from tom.tom import make_train_from_yml, TrainRun, RouteSection, Route
    from tom.util import example








.. GENERATED FROM PYTHON SOURCE LINES 13-14

Load example from yaml specification

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default

    pattern = 'otr-test'
    _, t_spec_file = example('../tests/data', pattern)
    print(t_spec_file.read_text())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ---
    coreID: 30AB
    version: 1
    sections:
        - departure_station: A
          arrival_station: B
          travel_time: '01:00:00'
          calendar:
            begin: '2020-12-01'
            end: '2020-12-02'
          id: '10.10'
          color: salmon
          succ:
              - '10.20'
              - '11.20'
        - departure_station: B
          arrival_station: C
          departure_time: '00:30:00'
          travel_time: '12:00:00'
          calendar:
            begin: '2020-12-02'
            end: '2020-12-02'
          id: '10.20'
          color: red
          succ:
            - '10.30'
        - departure_station: B
          arrival_station: C
          departure_time: '00:30:00'
          travel_time: '12:00:00'
          stop_time: '24:00:00'
          calendar:
            begin: '2020-12-04'
            end: '2020-12-04'
          id: '11.20'
          color: green
          succ:
            - '10.30'
        - departure_station: C
          arrival_station: D
          travel_time: '12:00:00'
          calendar:
            begin: '2020-12-02'
            end: '2020-12-04'
            # Exclude Thu 3.12. No section run on this day!
            mask: 'Wed Fri'
          id: '10.30'
          color: blue





.. GENERATED FROM PYTHON SOURCE LINES 19-20

Create train object and show its train id.

.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: default

    t = make_train_from_yml(t_spec_file)
    t.train_id()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    'TR/8350/30AB/2020'



.. GENERATED FROM PYTHON SOURCE LINES 24-27

Timetable
^^^^^^^^^
Show timetable as dataframe

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default

    df = t.to_dataframe()
    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Departure A</th>
          <th>Arrival B</th>
          <th>Departure B</th>
          <th>Arrival C</th>
          <th>Departure C</th>
          <th>Arrival D</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>TR/8350/30AB/2020/10.10/2020-12-01</th>
          <td>Di 01.12.20 23:30 -1</td>
          <td>Mi 02.12.20 00:30  0</td>
          <td>Mi 02.12.20 00:30  0</td>
          <td>Mi 02.12.20 12:30  0</td>
          <td>Mi 02.12.20 12:30  0</td>
          <td>Do 03.12.20 00:30  1</td>
        </tr>
        <tr>
          <th>TR/8350/30AB/2020/10.10/2020-12-02</th>
          <td>Mi 02.12.20 23:30 -2</td>
          <td>Do 03.12.20 00:30 -1</td>
          <td>Fr 04.12.20 00:30  0</td>
          <td>Fr 04.12.20 12:30  0</td>
          <td>Fr 04.12.20 12:30  0</td>
          <td>Sa 05.12.20 00:30  1</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 31-34

Bildfahrplan
^^^^^^^^^^^^
Show timetable as plot

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    plot_train(t)




.. image:: /auto_examples/images/sphx_glr_plot_test_otr_001.png
    :alt: Timetable TR/8350/30AB/2020 v1
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 37-40

Route Sections
^^^^^^^^^^^^^^
From which sections the train is composed?

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: default

    section: RouteSection
    for section in t.sections:
        print(section.description(), "\n")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ID        : 10.10v1
    Calender  : 01/12 to 02/12
    Start   at: 23:30 in A
    Arrival at: 00:30 in B
    Successors: ['10.20', '11.20'] 

    ID        : 10.20v1
    Calender  : 02/12 to 02/12
    Start   at: 00:30 in B
    Arrival at: 12:30 in C
    Successors: ['10.30'] 

    ID        : 11.20v1
    Calender  : 04/12 to 04/12
    Start   at: 00:30 in B
    Arrival at: 12:30 in C
    Successors: ['10.30'] 

    ID        : 10.30v1
    Calender  : 02/12 to 04/12
    Start   at: 12:30 in C
    Arrival at: 00:30 in D
    Successors: [] 





.. GENERATED FROM PYTHON SOURCE LINES 45-48

Section graph
^^^^^^^^^^^^^
The section graph is computed using the successor relation:

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: default


    sg = t.section_graph()
    plot_graph(sg)




.. image:: /auto_examples/images/sphx_glr_plot_test_otr_002.png
    :alt: plot test otr
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-57

Routes
^^^^^^
Print all possible routes.
Routes are calculated from all possible paths in the section graph.

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default

    route: Route
    for route in t.routes():
        print(route.description(), "\n")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Route     : A-B-C-D
    Key       : 10.10-10.20-10.30
    Calendar  : 01/12 to 01/12
    Start   at: 23:30 in A
    Arrival at: 00:30 in B
    Arrival at: 12:30 in C
    Arrival at: 00:30 in D
 

    Route     : A-B-C-D
    Key       : 10.10-11.20-10.30
    Calendar  : 02/12 to 02/12
    Start   at: 23:30 in A
    Arrival at: 00:30 in B
    Arrival at: 12:30 in C
    Arrival at: 00:30 in D
 





.. GENERATED FROM PYTHON SOURCE LINES 62-66

Section runs
^^^^^^^^^^^^
For each day of the calendar of a section a `SectionRun` is created.
The section runs are the rows of RouteSection.to_dataframe:

.. GENERATED FROM PYTHON SOURCE LINES 66-70

.. code-block:: default

    for section in t.sections:
        print(f"{section.section_id}: {section}")
        print(section.to_dataframe(), "\n")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    10.10: A-B
                  ID                   A                   B
    2020-12-01  10.1 2020-12-01 23:30:00 2020-12-02 00:30:00
    2020-12-02  10.1 2020-12-02 23:30:00 2020-12-03 00:30:00 

    10.20: B-C
                  ID                   B                   C
    2020-12-02  10.2 2020-12-02 00:30:00 2020-12-02 12:30:00 

    11.20: B-C
                  ID                   B                   C
    2020-12-04  11.2 2020-12-04 00:30:00 2020-12-04 12:30:00 

    10.30: C-D
                  ID                   C                   D
    2020-12-02  10.3 2020-12-02 12:30:00 2020-12-03 00:30:00
    2020-12-04  10.3 2020-12-04 12:30:00 2020-12-05 00:30:00 





.. GENERATED FROM PYTHON SOURCE LINES 71-74

TrainRuns
^^^^^^^^^
Each `TrainRun` defines a row in the timetable of the train above

.. GENERATED FROM PYTHON SOURCE LINES 74-80

.. code-block:: default

    tr: TrainRun
    for tr in t.train_run_iterator():
        print(tr)
        for sr in tr.sections_runs:
            print(sr)
        print("\n")




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    TR/8350/30AB/2020/10.10/2020-12-01
    10.10v1:2020-12-01 23:30 OTR=-1 A-B 2020-12-02 00:30 OTR=0
    10.20v1:2020-12-02 00:30 OTR=0 B-C 2020-12-02 12:30 OTR=0
    10.30v1:2020-12-02 12:30 OTR=0 C-D 2020-12-03 00:30 OTR=1


    TR/8350/30AB/2020/10.10/2020-12-02
    10.10v1:2020-12-02 23:30 OTR=-2 A-B 2020-12-03 00:30 OTR=-1
    11.20v1:2020-12-04 00:30 OTR=0 B-C 2020-12-04 12:30 OTR=0
    10.30v1:2020-12-04 12:30 OTR=0 C-D 2020-12-05 00:30 OTR=1







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.877 seconds)


.. _sphx_glr_download_auto_examples_plot_test_otr.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_test_otr.py <plot_test_otr.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_test_otr.ipynb <plot_test_otr.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
